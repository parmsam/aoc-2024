---
title: "day 2"
---
```{python setup}
import setup
from aocd import get_data
from aoc_funcs import read_aoc_input
```

The unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces. For example:
```
7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
```
This example data contains six reports each containing five levels.

The engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the following are true:

The levels are either all increasing or all decreasing.
Any two adjacent levels differ by at least one and at most three.
In the example above, the reports can be found safe or unsafe by checking those rules:
```
7 6 4 2 1: Safe because the levels are all decreasing by 1 or 2.
1 2 7 8 9: Unsafe because 2 7 is an increase of 5.
9 7 6 2 1: Unsafe because 6 2 is a decrease of 4.
1 3 2 4 5: Unsafe because 1 3 is increasing but 3 2 is decreasing.
8 6 4 4 1: Unsafe because 4 4 is neither an increase or a decrease.
1 3 6 7 9: Safe because the levels are all increasing by 1, 2, or 3.
So, in this example, 2 reports are safe.
```
Analyze the unusual data from the engineers. How many reports are safe

```{python p1}
from aocd import get_data
data = get_data(year = 2024, day = 2)
data = data.splitlines()
data = [i.split() for i in data]
data = [[int(x) for x in row] for row in data]

def read_report(sample_list):
    check1 = sorted(sample_list) == sample_list or sorted(sample_list, reverse = True) == sample_list
    if not check1:
        return False
    adjacency_list = list(map(lambda x,y: x -y, sample_list, [0] + sample_list[:-1]))[1:]
    check2 = all([abs(i) in [1,2,3] for i in adjacency_list])
    if not check2:
        return False
    else:
        return True

sum([read_report(i) for i in data])
```

Now, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.

More of the above example's reports are now safe:
```
7 6 4 2 1: Safe without removing any level.
1 2 7 8 9: Unsafe regardless of which level is removed.
9 7 6 2 1: Unsafe regardless of which level is removed.
1 3 2 4 5: Safe by removing the second level, 3.
8 6 4 4 1: Safe by removing the third level, 4.
1 3 6 7 9: Safe without removing any level.
```
Thanks to the Problem Dampener, 4 reports are actually safe!

Update your analysis by handling situations where the Problem Dampener can remove a single level from unsafe reports. How many reports are now safe?

```{python p2}
def check_variations(sample_list):
    def get_variations(lst):
        return [lst[:i] + lst[i+1:] for i in range(len(lst))]
    sample_vars = get_variations(sample_list)
    sample_vars.insert(0, sample_list)
    check = any([read_report(i) for i in sample_vars])
    return check

sum([check_variations(i) for i in data])
```