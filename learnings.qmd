--- 
title: "Learnings"
---

- `sort()` vs `sorted()`: `sort()` sorts the list in place, while `sorted()` returns a new list
- `zip()`: `zip()` is a built-in Python function that takes in two or more iterables (lists, tuples, etc.) and returns an iterator that generates tuples containing elements from each iterable. The iterator stops when the shortest input iterable is exhausted. They're useful in for loops and list comprehensions with unpacking.
    - Unpacking is a way to assign the elements of an iterable to variables. For example, `a, b = (1, 2)` assigns 1 to `a` and 2 to `b`.
- slicing using `[:x]` and `[x:]` to get the first x elements and the elements after the first x elements, respectively 
    - the slice syntax includes the start index but excludes the end index, so `[:2]` gets the first two elements since indexing starts at 0 in python
    - it always return a list even if the slice is empty or just has one element
- the `itertools` module has a `combinations()` function that returns all possible combinations of a given length from an iterable that would've made it easier to solve the second part of day 2
```{python} 
from itertools import combinations
sample_list = [1, 2, 3, 4, 5]
n = len(sample_list)
# in that case all possible lists of length n-1
possible_lists = combinations(sample_list, n-1)
list(possible_lists)
```
- `re` module has `re.findall()` and `re.finditer()` functions that can be used to find all matches of a pattern in a string and return them as a list of strings or an iterator of match objects, respectively
- `zip(*iterables)` can be used to transpose a list of lists. It does this by unpacking the elements of the list of lists and passing them as arguments to `zip()`. This is useful for getting the columns of a 2D list as rows and vice versa.
- `topological sorting` is a way to order the nodes in a directed acyclic graph (DAG) such that for every edge from node `u` to node `v`, `u` comes before `v` in the ordering. This is useful for tasks that have dependencies on each other, like the rules in the second part of day 7. The `networkx` library has a `topological_sort()` function that can be used to get the topological ordering of a graph. The general algorithm is as follows:
    1. First, it finds all nodes that have no incoming edges (nothing must come before them) - these are our "starter" nodes
    2. Then it repeatedly:
        - Takes a starter node and adds it to the result list
        - Removes that node and all its edges from the graph
        - Any nodes that now have no incoming edges become new starter nodes
    3. If there are still nodes left but no starter nodes, there's a cycle (which would be impossible to sort)

