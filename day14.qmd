---
title: "day X"
---
```{python setup}
import setup
from aocd import get_data
from aoc_funcs import read_aoc_input
import numpy as np
import re
```

```{python p1}
def parse_input(data):
    pattern = r"-?\d+"
    return [[int(j) for j in re.findall(pattern, i)] for i in data.splitlines()]

def move_robot(position, velocity, width, height, n=100):
    for _ in range(n):
        position = list(np.array(position) + np.array(velocity))
        position[0] = position[0] % width
        position[1] = position[1] % height
    return position

def get_quadrant(x, y, width, height):
    if x == width//2 or y == height//2:
        return 0
    if x < width//2:
        return 1 if y < height//2 else 3
    else:
        return 2 if y < height//2 else 4

def solve(data, width=11, height=7):
    robots = parse_input(data)
    final_positions = []
    # Move each robot
    for robot in robots:
        pos, vel = robot[0:2], robot[2:4]
        final_pos = move_robot(pos, vel, width, height)
        final_positions.append(final_pos)
    # Count robots in each quadrant
    quadrant_counts = {1:0, 2:0, 3:0, 4:0}
    for pos in final_positions:
        q = get_quadrant(pos[0], pos[1], width, height)
        if q != 0:  # Only count if not on middle lines
            quadrant_counts[q] += 1
    print("Final positions:", final_positions)
    print("Quadrant counts:", quadrant_counts)
    # Calculate safety factor
    safety_factor = 1
    for count in quadrant_counts.values():
        safety_factor *= count
    return safety_factor

# data = """p=0,4 v=3,-3
# p=6,3 v=-1,-3
# p=10,3 v=-1,2
# p=2,0 v=2,-1
# p=0,0 v=1,3
# p=3,0 v=-2,-2
# p=7,6 v=-1,-3
# p=3,0 v=-1,-2
# p=9,3 v=2,3
# p=7,3 v=-1,2
# p=2,4 v=2,-3
# p=9,5 v=-3,-3"""
# result = solve(data, 11, 7)
data = get_data(year= 2024, day= 14)
result = solve(data, 101, 103)
print(f"Safety factor: {result}")
```

```{python p2}

```